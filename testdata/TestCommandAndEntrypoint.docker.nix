{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."test-both" = {
    image = "nginx:latest";
    cmd = [ "ls" "-la" "\"escape me please\"" ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--entrypoint=[\"nginx\", \"-g\", \"daemon off;\", \"-c\", \"/etc/config/nginx/conf/nginx.conf\"]"
      "--network-alias=both"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-both" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-empty-command-and-entrypoint" = {
    image = "nginx:latest";
    cmd = [  ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--entrypoint=[]"
      "--network-alias=empty-command-and-entrypoint"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-empty-command-and-entrypoint" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-null-command-and-entrypoint" = {
    image = "nginx:latest";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=null-command-and-entrypoint"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-null-command-and-entrypoint" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-string" = {
    image = "nginx:latest";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--entrypoint=[\"ENV_VAR=\${ABC}\", \"bash\", \"/abc.sh\"]"
      "--network-alias=string"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-string" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };
  virtualisation.oci-containers.containers."test-string-with-quotes" = {
    image = "nginx:latest";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--entrypoint=[\"bash\", \"-c\", \"echo \\\"Hello World\\\" && ls\"]"
      "--network-alias=string-with-quotes"
      "--network=test_default"
    ];
  };
  systemd.services."docker-test-string-with-quotes" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-test_default.service"
    ];
    requires = [
      "docker-network-test_default.service"
    ];
  };

  # Networks
  systemd.services."docker-network-test_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f test_default";
    };
    script = ''
      docker network inspect test_default || docker network create test_default
    '';
    partOf = [ "docker-compose-test-root.target" ];
    wantedBy = [ "docker-compose-test-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-test-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
